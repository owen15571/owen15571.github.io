{"pages":[{"title":"Hackintosh","text":"","link":"/Hackintosh/index.html"},{"title":"","text":"WebGL Fluid Simulation @font-face { font-family: 'iconfont'; src: url('iconfont.ttf') format('truetype'); } * { user-select: none; } html, body { overflow: hidden; background-color: #000; } body { margin: 0; position: fixed; width: 100%; height: 100%; } canvas { width: 100%; height: 100%; } .dg { opacity: 0.9; } .dg .property-name { overflow: visible; } .bigFont { font-size: 150%; color: #8C8C8C; } .cr.function.appBigFont { font-size: 150%; line-height: 27px; color: #A5F8D3; background-color: #023C40; } .cr.function.appBigFont .property-name { float: none; } .cr.function.appBigFont .icon { position: sticky; bottom: 27px; } .icon { font-family: 'iconfont'; font-size: 130%; float: right; } .twitter:before { content: 'a'; } .github:before { content: 'b'; } .app:before { content: 'c'; } .discord:before { content: 'd'; } .promo { display: none; /* display: table; */ position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: 1; overflow: auto; color: lightblue; background-color: rgba(0,0,0,0.4); animation: promo-appear-animation 0.35s ease-out; } .promo-middle { display: table-cell; vertical-align: middle; } .promo-content { width: 80vw; height: 80vh; max-width: 80vh; max-height: 80vw; margin: auto; padding: 0; font-size: 2.8vmax; font-family: Futura, \"Trebuchet MS\", Arial, sans-serif; text-align: center; background-image: url(\"promo_back.png\"); background-position: center; background-repeat: no-repeat; background-size: cover; border-radius: 15px; box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19); } .promo-header { height: 10%; padding: 2px 16px; } .promo-close { width: 10%; height: 100%; text-align: left; float: left; font-size: 1.3em; /* transition: 0.2s; */ } .promo-close:hover { /* transform: scale(1.25); */ cursor: pointer; } .promo-body { padding: 8px 16px 16px 16px; margin: auto; } .promo-body p { margin-top: 0; mix-blend-mode: color-dodge; } .link { width: 100%; display: inline-block; } .link img { width: 100%; } @keyframes promo-appear-animation { 0% { transform: scale(2.0); opacity: 0; } 100% { transform: scale(1.0); opacity: 1; } } window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date; ga('create', 'UA-105392568-1', 'auto'); ga('send', 'pageview'); &times; Try Fluid Simulation app!","link":"/fluid/index.html"},{"title":"link","text":"这里不是放友链的地方，这是黑苹果网站＆论坛的链接汇总 黑果小兵的blog一个非常好的bolg（别问我为什么） Github万物始于GitHub 远景pcbeta不需要我过多描述了吧 insanelymac国外的远景，有中文（不建议中文访问，建议英文，内容较多） 驱动下载网站kexts驱动由网友上传 oxx86project不错的黑苹果网站，没有中文","link":"/link/index.html"},{"title":"movies","text":"这个栏交给你们了（评论区发表）","link":"/movies/index.html"},{"title":"tags","text":"暂无","link":"/tags/index.html"},{"title":"music","text":"这个栏交给你们了，帮我填满（在评论里面填）","link":"/music/index.html"},{"title":"about","text":"本blog建设者catowen今年13岁了，emmmm，我似乎没有什么可说的，我喜欢计算机，喜欢打游戏，撸代码，但是学业繁重啊，可能不能及时更新（尤其是黑果大典）偶尔用谷歌翻译啥的翻译一些国外的文章给大家看。 ————————以下是鸣谢—————————— 鸣谢感谢一切提供文章内容的贡献者 我的朋友——提供域名 GitHub——托管项目 butterfly主题的制作者——本站主题 hexo群的成员以及butterfly群的成员们——为我解决了很多问题","link":"/about/index.html"},{"title":"黑果大典","text":"大典一词取自《永乐大典》，尽管我的介绍并不细致，但这是我努力的目标 本人才疏学浅，请多指教。 本书是为了让黑果小白更快的入门，以及方便自己日后进行复习所用，以黑果为载体，学习计算机 序本书将讲述黑苹果，如果你不知道什么是黑苹果，请百度 黑果的注意事项1.足够的耐心，因为你永远也不知道你下一步会遇到什么 2.胆量，胆小鬼一般都害怕系统挂掉，可是这在黑果的过程中是常有的 3.细心，胆量不意味着鲁莽。 4.思考，在提问前，考虑清楚你是否做的正确 5.喜爱，不要以黑苹果为你的生计，这是爱好。 6.确保你的配置可以安装，请询问你周围安装过黑苹果的人。 黑果的形式黑果有两种形式，如同Windows，你可以使用虚拟机，也可以直接安装，我更偏向于直接安装，更加方便使用和驱动，并且黑苹果虚拟机卡顿严重。 黑果的引导众所周知，macos不能直接从PC的UEFI或BIOS启动，因此，有特殊的引导给他使用。 clover成熟且更自定义的引导，有主题可以更换，从UEFI启动到clover再启动到macos，更新即将结束。 opencore（oc）新的引导，日后也许会代替clover，但它不够成熟，成品较少，没有主题，不够自定义。 变色龙（不推荐）已经过时，是黑果前期的回忆，在我早期接触黑果时，他曾红极一时，但极为复杂，尚不清楚是否可用（目前），相比于oc和clover，我更推荐前两者。 开始之前检查检查你是否已经备份Windows，并且有一个至少8GB的U盘（以上更好），检查你是否已经有镜像，并且格式化U盘（备份U盘中的内容，如果你需要） 镜像如果你没有镜像，你有几个获取方法 1.只是安装，你可以使用黑果小兵的镜像，安装后仍然可以更换clover 2.自己动手，请跳过开始，前往引导。 刻录刻录建议使用etcher，刻录后，可以使用DG分区更改clover或OC 安装再次记住，备份。 重启后你会遇到clover或OC的引导界面，选择从USB中安装mac，如果你在跑代码，不要害怕，这是正常的，如果在一条代码上卡了30分钟以上，请联系你周围的黑果大佬，你也可以在留言板留言。 如果成功进入，重启，进入Windows，分区一个硬盘，记住，一定要重命名。 再次进入安装界面，选择磁盘工具，抹掉你刚刚分区的硬盘，为macos拓展。 退出磁盘工具，选择安装macos，自此成功。 如果你在这一章节无问题，并且安装成功，请跳转至驱动，如果有，请继续阅读 引导不是每个引导都可以用于你的计算机，有时你需要自己配clover或oc，clover有很多成品，进入DG分区选择USB的EFI分区，并且找到EFI文件夹，打开，替换掉原来的EFI便可（clover和OC通用） 下面是自主配置的方法 clover不建议自主配置，很麻烦。我没有学习过clover，所以，请到其他论坛学习（日后添加该教程） opencore（Windows下）首先下载gitmac 随后，下载一个不完整的恢复镜像 使用makeinstall，进行安装。 随后的步骤，open core官网写的很清楚，国内也有大量论坛，在此，只说明大概 EFI文件夹——启动EFI用 Ketes——驱动 Tool——别放东西（可以留一个） 我怕给各位带歪，所以并不敢在引导方面多加陈述和讲解。 驱动以下设备没有驱动 killer系列网卡（作者本人使用） 英特尔大部分网卡 N卡图形卡（部分有） ………………………………………………. 大量的设备都没有驱动，因此驱动将在blog中讲述，在本书中不做过多讲解。 以下情况是没有驱动导致的 进入启动台异常卡顿——显卡驱动 没有WiFi网络——网卡驱动 无法进入clover——重要驱动没有 以上为缺少驱动的后果。 继续使用黑苹果的不稳定，导致其不能和白果一样，有很多指令和驱动可以解决这些问题，而黑果的最终，是白果，在这一大章节中，我们将继续讲述安装后的使用和其他方式的黑果 虚拟机使用unloke（好像是这么打的）对虚拟机进行解锁 获得一个cdr后缀的镜像（注意，dmp不支持虚拟机） 开始使用前，我来告诉你利弊 如果你的设备能够正常安装黑果，请不要安装虚拟机黑果，最少给他分配二核，8G内存，主系统面临巨大压力，随时可能崩溃 所以我不多加介绍，各位权衡利弊 虚拟机可能遇到的问题进入bios。——镜像问题，换个试试 没有Apple选项——没有破解，或者破解失败 卡顿——没有驱动（也不可能有） 详解引导opencore前面不敢多说，怕引起小白恐慌，因此在这里做详细介绍 部分引用自黑果小兵blog 什么是 OpenCoreOpenCore(简称 OC) 是一个着眼于未来开源的引导工具, 最初诞生于 HermitCrabs 实验室, 现在接手于 Acidanthera, 其目的是创造一个更加严谨的模组化的轻量引导系统。尽管 OpenCore 的主要用途是黑苹果, 它也支持其它操作系统的引导。目标是安全，而clover并不能安全启动。 oc配置bios设置禁用| Fast Boot | 快速启动 || ——— | ——– || | || CFG Lock | CFG锁 || ——– | —– || | || VT-d | Hyper Threading || —- | ————— || | || CSM | 兼容性支持模块 || —- | ————– || | | 启用| VT-x | VT-x || —- | —- || | || Above 4G decoding | | 大于4G地址空间解码 || —————– | —- | —————— || | | || Hyper Threading | | 超线程 || ————— | —- | —— || | | || Execute Disable Bit | | 执行禁止位 || ——————- | —- | ———- || | | || EHCI/XHCI Hand-off | | 接手EHCI/XHCI控制 || —————— | —- | —————– || | | | ps：作者懒得更新，每周打1000词左右","link":"/heiguodadian/index.html"},{"title":"镜像站","text":"镜像均为正版，请放心下载（如有无法下载的情况，请及时留言）（大部分为64位） Windows server2019（虚拟机请先删除软盘，启动改为BIOS方可安装） 深度Linux（非常好的国产Linux） Ubuntuserver20.04（只有命令行） arch种子下载（推荐） arch 163下载（推荐） Cent OS（阿里云下载链接） pcLinuxos（日本下载站，XtceDesktop版） pureos kubuntu20.04LTS Debian10.4.0Amd64-DVD Fedora 32工作站 Kali（BT种子） 镜像站持续更新，如有其他需要，请留言","link":"/%E9%95%9C%E5%83%8F%E7%AB%99/index.html"}],"posts":[{"title":"opencore大典","text":"本教程部分来自于黑果小兵和xjn的教程，ACPI部分翻译自官方文档（不明原因无法访问） 对于opencore的介绍opencore是新的黑果引导，大部分的教程都是英文的，对某些英文不好的孩子来说很/*/，所以，国内的各路大佬各显神通，最厉害的自然是黑果小兵。 opencore有一些优点，在我看来，它不是很需要GUI编辑，因为多数选项只有Ture和False，因此无需GUI，GUI还有点麻烦。它可以像clover一样有优美的图形界面，也可以像grub一样朴实无华，并且最新的测试版已经可以玩macos11了（0.6.0） 开始之前确定你的oc版本，并有编辑器，请在黑果小兵：oc精解中找到下载目录，本人懒得写。 opencore配置开始真正好玩的在这里。。。。 ProperTree-master编辑器非常好用，完全没必要用GUI编辑器OCC，运行Bat后缀（Windows下）吗、或mac的命令提示符文件，进入后，CTRL+O，打开官方给的示例，然后进行配置 整理文件编辑官方的配置文件之前，我们需要整理目录中的文件 Driver文件夹下删除： AppleUsbKbDxe.efi 给老主板用的，新主板千万别用 NvmExpressDxe.efi 同上 XhciDxe.efi 还是一样 HiiDatabase.efi 老主板渲染中文用的，新主板还是不用 Tools文件夹下 文件名 原因 BootKicker.efi 调用苹果原生GUI，咱是黑果 CleanNvram.efi 顾名思义，清理Nvram（小兵说自带就够用） GopStop.efi 停止显卡GOP HdaCodecDump.efi 适用于定制声卡（我没钱定制） VerifyMsrE2.efi 检查主板CFG锁 放入文件请进入黑果小兵的opencore群，下载最新驱动 请访问xjn的opencore教程，找到下载目录 配置config注意，oc和clover的配置文件不能通用！请打开官方配置文件进行配置，不然累死你。 如果有疑问，请参考 opencore官方文档 编辑acpi子项Add改为你oc/acpi中的文件 Block禁用ACPI表用 Patch对DSDT/SSDT内容进行查找替换 QuirksFadtEnableReset: NO NormalizeHeaders: NO RebaseRegions: YES ResetHwSig: NO ResetLogoStatus: NO Quirks该部分照搬黑果小兵教程（懒） AvoidRuntimeDefrag: YES 开启后会修复 UEFI 的运行服务, 例如日期, 时间, NVRAM, 电源控制等 DevirtualiseMmio: YES 开启后会减少 Stolen 内存占用空间，扩大 Slide = N 值的范围, 适用于大多数主板 DisableSingleUser: NO 开启后会禁止 Cmd + S 和 -s 的使用，使设备更加接近于 T2 白苹果 DisableVariableWrite: NO 开启后会禁止 NVRAM 写入, 在 Z390/HM370 等没有原生 macOS 支持 NVRAM 的主板上需要开启 DiscardHibernateMap: NO 开启后会重用原始休眠内存映射，仅某些旧硬件需要 EnableSafeModeSlide: YES 开启后会允许在安全模式下使用 Slide 值 EnableWriteUnprotector: YES 开启后会在执行期间删除 CR0 寄存器中的写入保护 ForceExitBootServices: NO 开启后会确保 ExitBootServices 即使在 MemoryMap 发生更改时也能调用成功, 除非有必要, 否则请勿使用 ProtectCsmRegion: NO 开启后会用于修复人为制造和睡眠唤醒的问题, AvoidRuntimeDefrag 已经修复了这个问题所以请尽可能避免使用这个 Quirk ProtectSecureBoot: NO 避免操作系统对 UEFI 安全启动变量 (db, dbx, PX, KEK) 进行写入, 这个选项主要用于避免 Insyde 主板和 MacPro5,1 的 NVRAM 问题 ProvideCustomSlide: YES 如果 Slide 值存在冲突, 此选项将强制 macOS 执行以下操作: 使用一个伪随机值。 只有在遇到 Only N/256 slide values are usable! 时需要 SetupVirtualMap: YES 开启后会将 SetVirtualAddresses 调用修复为虚拟地址 ShrinkMemoryMap: NO 有巨大且不兼容内存映射的主板需要开启, 非必须不要使用 SignalAppleOS: NO 通过 OS Info 将 macOS 加载的信息报告给其它操作系统, 用于在 Windows 中为 MacBook 启用 iGPU DeviceProperties设备属性这部分在下不会，在下也没用到，照搬小兵。 不同的设备硬件地址不一样! 你需要先通过 Hackintool 或者 Windows 设备管理器 等工具查看 PCI 设备地址! 此处内容可以用 Hackintool 生成然后直接复制过来, 请提前确保内容和结构无误 Add: 添加 _DSM 设备属性 1PciRoot(0x0)/Pci(0x2,0x0) 注入缓冲帧补丁, 查看 此处来确认你需要的缓冲帧补丁 1PciRoot(0x0)/Pci(0x1f, 0x3)` → `Layout-id 应用 AppleALC 音频 Layout ID 注入 Block: 用于删除/屏蔽设备属性 (可以删除此项, 大多数情况都用不到) 这里的设置等同于 Clover 里的 ACPI 重命名 _DSM → XDSM + TgtBridge Kernel内核Add: BundlePath 这里填入 Kext 的名称 如: Lilu.kext Enabled 控制 Kext 的启用禁用 ExecutablePath 隐藏在 kext 中的实际可执行文件的路径，可以通过右键单击并选择 显示包内容 来查看 Kext 的路径。 通常为 Contents/MacOS/(Kext)，但有的时候 Plugin 文件夹下也会有 Kext。 如: Contents/MacOS/Lilu 空壳 Kext 没有可执行文件 (e.g. USBPorts.kext), 此项留空即可 PlistPath 隐藏在 Kext 中的 Info.plist 路径 如: Contents/Info.plist VoodooI2C 注入样板 🚪 VoodooPS2 注入样板 🚪 Emulate: 仿冒不支持的 CPU, 例如奔腾和赛扬, 或者在不支持的 CPU 上启用 XCPM CpuidData: 设置为零时，将使用原始 CPU 位 &lt;Clover_FCPUID_Extended_to_4_bytes_Swapped_Bytes&gt; | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 例如: CPUID 0x0306A9 就是 A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidMask: CPU 的被仿冒位 FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 如果需要替换更长的位, 将 00 替换为 FF Block: 屏蔽系统里的 Kext Patch: 这是你要添加系统内核补丁, Kext 补丁, 和 AMD CPU 补丁的地方。(等同于 Clover 的 KextToPatch 和 KernelToPatch) Quirks: AppleCpuPmCfgLock: 1NO 如果设备的 CFG-Lock 是开启的状态则需要设置为 YES (尽可能用 Grub 关闭 BIOS 的 CFG-Lock 并避免开启这个 Quirk) AppleXcpmCfgLock: 1NO 同上 AppleXcpmExtraMsrs: 1NO 禁用奔腾和某些至强等不支持 CPU 所需的多个 MSR 访问 AppleXcpmForceBoost: 1NO 强制拉高睿频, 建议在长期高负载的专业设备上使用, 至强系列的处理器开启这个选项会受益 CustomSMBIOSGuid: 1NO 对 UpdateSMBIOSMode 自定义模式执行 GUID 修补, 用于戴尔笔记本电脑 (等同于 Clover 的 DellSMBIOSPatch) DisbaleIOMapper: 1NO 需要绕过 VT-d 且 BIOS 中禁用时使用 DummyPowerManagement: 1NO 禁用 AppleIntelCpuPowerManagement 原生电源管理, 用于更好的替代 NullCpuPowerManagement.kext ExternalDiskIcons: 1YES 硬盘图标补丁, macOS 将内部硬盘视为外接硬盘 (黄色) 时使用 IncreasePciBarSize: 1NO 将 IOPCIFamily 中 32 位 PCI Bar 的大小从 1GB 增加到 4GB, 在 BIOS 中启用 Above4GDecoding 是一种更加干净和安全的方法。某些 X99 板可能需要开启, 这些主板通常会在 IOPCIFamily 上遇到内核崩溃 LapicKernelPanic: 1NO 禁用由 AP 核心 lapic 中断造成的内核崩溃, 通常用于「惠普电脑」 (等同于 Clover 的 Kernel LAPIC) PanicNoKextDump: 1YES 在发生内核崩溃时阻止输出 Kext 列表, 提供可供排错参考的崩溃日志, 排错时请务必开启 PowerTimeoutKernelPanic: 1YES 修复 macOS Catalina 中由于设备电源状态变化超时而导致的内核崩溃 ThirdPartyDrivers: 1NO 为 SSD 启用 TRIM 指令, NVMe SSD 会自动被 macOS 加载因此不需要, SATA SSD 可以在终端执行 sudo trimforce enable 开启 同时修复 macOS 10.15 下非苹果原厂 SSD 无法使用硬盘休眠 (hibernatemode 25) XhciPortLimit: 1YES 这实际上是 15 端口限制补丁, 不建议依赖, 因为这不是 USB 的最佳解决方案。有能力的情况下请选择定制 USB, 这个选项适用于没有定制 USB 的设备 我是渣渣，这部分我没有啥好的想法，照搬小兵（抱歉了小兵） Security: 安全 AllowNvramReset: YES 允许在引导选择界面和快捷键 Cmd + Opt + P + R 按下时重置 NVRAM AllowSetDefault: YES 允许使用 CTRL + 回车 和 CTRL + 数字 锁定默认启动项 AuthRestart: NO 允许重启 FileVault2 分区时不用再次输密码, 有安全风险 ExposeSensitiveData: 3 将 OpenCore 的启动路径和版本储存进 NVRAM 11 在 3 的基础上添加主板 OEM 信息, HWMonitorSMC2 和 NVMeFix 需要主板 OEM 信息才能正常工作 Vault: Optional OpenCore 自身的加密和安全保护, 具体参考官方文档 Optional 不强制要求 vault.plist 和 vault.sig 文件存在, 但是会在其中任意文件存在时依旧执行验证, 不安全 Basic 强制要求 vault.plist 存在, 开机时会根据里面的内容核对 OC 目录下的文件, 防止在 EFI 文件系统崩溃后依旧启动 Secure 强制要求 vault.sig 签名文件 和 vault.plist 存在, 用于和 UEFI 安全启动配合 ScanPolicy: 0 0: 允许扫描所有可用的硬盘 其它值请参考官方文档, 对给出的选项做 16 进制加法运算 ACPI 黑果真正有意思的地方来了。。。。。。。。。。 概述啥是acpi，这是官网的解释 那么什么是 Dsdt 和 Ssdt，嗯，这些表出现在您的固件中，概述了硬件设备，如USB控制器，CPU线程，嵌入式控制器，系统时钟等。DSDT（差异化系统描述表）可视为包含大部分信息的正文，SSDT（辅助系统描述表）传递的信息位较小。您可以将 DSDT 视为建筑蓝图，SSDT 是便笺，概述了项目的额外细节 你可以阅读更多关于 ACPI 和它规格在这里： ACPI 6.3 手册 那么，我们为什么要关心这些表呢？ macOS 对 Dsdt 中的设备非常挑剔， 所以我们的工作是纠正它。需要更正才能正常工作的主要设备： 嵌入式控制器（EC） 所有半现代英特尔机器的 DSDT 中都H_EC（通常称为 H_EC、ECDV、EC0 等），许多 AMD 系统也都公开了它。这些控制器通常与 macOS 不兼容，并可能导致恐慌，因此需要隐藏 macOS。macos Catalina 需要一个名为的设备存在， 因此创建了一个虚拟 Ec 。EC 对于笔记本电脑，实际的嵌入式控制器仍然需要启用，电池和热键工作，重命名 EC 可能会导致窗口问题，因此创建一个假的EC而不禁用真正的嵌入式控制器是可取的。 插件类型 这允许使用 XCPM 在英特尔 Haswell和较新的CPU 上提供本机 CPU 电源管理，SSDT 将连接到 CPU 的第一个线程。不是为 Amd 准备的 AWAC 系统时钟。 这适用于所有 300 系列主板，包括许多 Z370 主板，具体问题是，较新的主板船舶与 AWAC 时钟启用。这是一个问题， 因为 macOS 无法与 Awac 时钟通信， 因此这要求我们要么强制使用旧版 Rtc 时钟， 要么不可用， 请创建一个假时钟供 macOS 使用 NVRAM SSDT 真正的 300 系列主板（非 Z370）不会在 ACPI 中声明 FW 芯片为 MMIO，因此内核会忽略 UEFI 内存映射声明的 MMIO 区域。此 SSDT 带回了 NVRAM 支持 背光 Ssdt 用于固定笔记本电脑上的背光控制支持 GPIO SSDT 用于创建存根，允许巫毒 2C 连接到，仅适用于笔记本电脑 XOSI SSDT 用于将 OSI 调用重新路由到此 SSDT，主要用于欺骗我们的硬件考虑其引导 Windows，以便我们得到更好的触控板支持。这是一个非常棘手的解决方案，以打破Windows启动，使用GPIOSSDT代替。本指南将不介绍 XOSI 的使用 IRQ SSDT 和 ACPI 修补程序 需要修复 DSDT 内的 IRQ 冲突，主要用于笔记本电脑。SSDTTime 独家 注意 Skylake 和较新的系统很少有 Irq 冲突， 这主要在布罗德韦尔和更高版本流行 这些只是概述，接下来我们要开始了。 选择SSDT（由于我是笔记本，所以我不是很了解台式机的选择，台式机我就按照官网的推荐了，如果你需要下载本文中GitHub的单个文件，我建议你从这里下载，速度更快） 电源管理对于 Haswell 和更新： SSDT - 插头 - 德特尼亚 这个似乎是必须的。。。 嵌入式控制器（文件从开头给出的下载站下载）对于台式机（？）： SSDT-EC-USBX-DESKTOP 用于天湖和更新和所有 AMD 系统。 SSDT-EC-DESKTOP 布罗德威尔和老年人。 对于笔记本电脑： SSDT-EC-USBX-笔记本电脑 对于天湖和更新。 SSDT - EC - 笔记本电脑 布罗德威尔和老年人。 触控板用于在 macOS 中仅启用 Windows 功能时，请注意，以下修补程序很可能通过 OpenCore 中断 Windows 引导。我强烈建议你自己做一个， 以防止任何问题下线：触控板 Gpi0 Ssdt - Xosi XOSI-重命名.列表 请注意，您需要将此添加到配置.plist 下：ACPI -&gt; Patch 评论 字符串 将_OSI更改为 XOSI 启用 布尔 是的 计数 数量 0 限制 数量 0 找到 数据 5f4f5349 取代 数据 584f5349 背光对于笔记本电脑和一台一式台式机，修复亮度控制支持 SSDT-PNLF 对于大多数用户。 SSDT - PNLF - cfl For Coffee Lake and newer. 系统时钟（AWAC）主要用于运行基于 AWAC 的系统时钟的较新的系统，主要用于 Z390 和更新（Gigabyte 和 AsRock，但通过 BIOS 更新将它重新传送到 Z370） Ssdt - awac 这个预构建的最大问题是， 我们只是猜测你们都有一个 Awac 时钟， 它可以关闭，我强烈建议你自己做一个， 真正知道你们两个是否需要这个， 如果它要工作： Awac vs Rtc NVRAM（PMC）需要恢复 Z390 及更高版本的 NVRAM 支持，请勿在 Z370 或更高版本上使用 注意：桌面 Z490 主板似乎不需要此，但如果您有 NVRAM 问题，您可以尝试此 SSDT。 SSDT- PMC 提醒以下仅需要此 SSDT： B360 B365 H310 H370 Z390 400系列（彗星湖） 495系列（冰湖） USB（RHUB）需要第 10 代 Cpu， 千兆字节和 Asrock 主板不需要这个 Ssdt - rhub. aml 构建一个SSDT因此，在这里，我们将使用一个超级简单的工具，由CorpNewt：SSDTTime 此工具的运行是，它会从固件中转储您的 DSDT，然后基于您的 DSDT 创建 SSDT。这必须在运行 Windows 或 Linux 的目标计算机上完成 它不能做什么万物皆有缺点，它也一样，比如它不能： HEDT SSDT： ACPI 在这些平台上很奇怪，因此需要手动工作 这包括 X79、X99 和 X299 系统 预构建可在此找到：嵌入式控制器 笔记本电脑 EC 修复： 这是因为您不希望 EC 关闭电源 预构建可在此找到：嵌入式控制器 SSDT-PNLF： 需要配置到您的系统 SSDT-GPI0： 需要配置到您的系统 AWAC 和 RTC0 SSDT： 300 系列英特尔板也需要弄清楚这一点 （Z390 系统是最常见的要求这一点， 但一些千兆字节 Z370 也做） PMC SSDT： 用于固定 300 系列英特尔 NVRAM 预构建可在这里找到： Nvram Pmc USBX SSDT： 这包含在示例 Ssdt 上， 但 Ssdttime 只使 SSDT - ec 部分， Skylake 和较新的用户可以在这里获取预构建的： SSDT - USBX. aml RHUB SSDT： 如果您有第 10 代 CPU，则需要使用预构建或手动创建它。 开始使用SSDTTime在目标计算机上以管理员格式运行该文件，您应该会看到类似这样的内容：SSDTTime.bat 1. FixHPET - Patch out IRQ Conflicts 1234 - IRQ 修补，主要用于 X79、X99 和笔记本电脑用户（使用选项省略冲突的旧 IRQ）`C`- 2. FakeEC - OS-aware Fake EC 1234 - 这是Catalina用户所需的 SSDT-EC- 3. PluginType - Sets plugin-type = 1 on CPU0/PR00 1234 - 这是 SSDT-PLUG，仅适用于英特尔- 4. Dump DSDT - Automatically dump the system DSDT 1234567891011121314151617181920212223242526272829303132333435363738394041424344 - 从固件中转储您的 DSDT我们要做的是先选择选项，然后为您的系统选择适当的选项。`4. Dump DSDT`&gt; USBX 呢？对于天湖和较新的加AMD，你可以在这里获取一个预构建的文件[：SSDT-USBX.aml。](https://github.com/dortania/USB-Map-Guide/blob/master/extra-files/SSDT-USBX.aml)此文件是即插即用，不需要设备配置**，请勿在 Broadwell 和旧版本上使用**。### 添加到opencore别忘了 Ssdts 需要添加到 Opencore， 提醒. aml 已遵守， . dsl 是代码。**仅添加 .aml 文件**：- EFI/OC/ACPI- 配置. plist - &gt; ACPI -&gt; 添加提醒Cmd/Crtl+R 与正确树指向您的OC文件夹将添加您的所有SSDTs，kexts和.efi驱动程序到配置。**不要将 DSDT 添加到 OpenCore 中，它已在固件中。**如果您不确定这指的是什么，请返回 OpenCore 指南，然后根据 CPU 的体系结构选择您的配置。对于那些还没有配置.plist的人，您需要下一个返回各自的 OpenCore 指南并创建配置.plist：- [OpenCore 桌面指南](https://dortania.github.io/OpenCore-Desktop-Guide/)- [OpenCore 笔记本电脑指南](https://dortania.github.io/vanilla-laptop-guide/)的用户还需要将 oc_patches列表合并到其配置.plist 中`FixHPET`实现此操作的步骤：- 打开两个文件，- 从配置.plist 中删除该部分`ACPI -&gt; Patch`- 从修补程序复制该部分。`ACPI -&gt; Patch`- 粘贴到旧修补程序在配置中。## 笔记本电脑的手动背光SSDT这一般是不需要自己配置的，试着去用预构建的，如果不行再来看这个### 查找 ACPI 路径对于本指南，我们将假设 Windows 已经位于此笔记本电脑上，否则创建此 SSDT 会有点困难。现在打开 DeviceManager，并前往以下内容：```textDevice Manager -&gt; Display Adapters -&gt; Properties -&gt; Details &gt; BIOS device name 请注意，某些 GPU ACPI 路径可能隐藏在”BIOS 设备名称”下 从上面的例子，我们可以看到我们的显示器被连接到PCI0.GFX0 编辑示例 SSDT现在，我们有了我们的 ACPI 路径，让我们抓住我们的 SSDT 并开始工作： Ssdt - Pnlf. dsl Ssdt - Pnlf - cfl. dsl 咖啡湖和更新 默认情况下，这用于路径。您需要相应地重命名。对于此示例，我们将假设您的路径为 ：PCI0.GFX0``PCI0.GPU0 之前： 12345External (_SB_.PCI0.GFX0, DeviceObj) &lt;- Rename thisScope (_SB.PCI0.GFX0) &lt;- Rename thisDevice(_SB.PCI0.GFX0.PNLF) &lt;- Rename this 按照我们发现的示例路径，SSDT 应如下所示： 之后： 12345External (_SB_.PCI0.GPU0, DeviceObj) &lt;- RenamedScope (_SB.PCI0.GPU0) &lt;- RenamedDevice(_SB.PCI0.GPU0.PNLF) &lt;- Renamed 编译 SSDT完成 SSDT 后，您现在可以编译 SSDT 了！ 触控板SSDT（手动）查找 ACPI 路径找到ACPI路径其实是很容易的，首先打开你的反编译的DSDT，你从转储DSDT和去编译与maciASL（如果在macOS）或任何其他文本编辑器，如果在Windows或Linux（VSCode有一个ACPI扩展，也可以帮助）。 下一步搜索 。应该给你一个类似的结果：Device (GPI0) 我们关心的方法：_STA 123456789Method (_STA, 0, NotSerialized){ If ((GPHD == One)) { Return (0x03) } Return (0x0F)} 我们希望在启动 macOS 时始终返回此项，因此我们希望创建一个将在 macOS 中返回的 SSDT。0x0F``GPHD == Zero 请注意，在 GPHD 需要设置为 One 以返回0x0F时，您可能有相反的方式``。您的设备名称也可能不同， 不要抛出随机 Ssdts 认为它会工作 下面是一些更多示例： 通过这个例子，我们可以看到，我们需要两个和返回。如果只有一个存在，它会创建一些问题，所以在我们的 SSDT 中，我们将希望它们两个返回：SBRG``GPEN``One``One 编辑示例 SSDT现在，我们有了我们的 ACPI 路径，让我们抓住我们的 SSDT 并开始工作： SSDT - gpi0. dsl From the second example, we’ll want to set both GPEN and SBRG to to allow it to operate in macOS:One Before: 12345If (_OSI (&quot;Darwin&quot;)) { GPEN = One &lt;- Change to the right variables SBRG = One &lt;- Change to the right variables } 按照我们发现的示例路径，SSDT 应如下所示： 之后： 1234If (_OSI (&quot;Darwin&quot;)) { GPEN = One &lt;- Proper variables } 编译 SSDT完成 SSDT 后，您现在可以编译 SSDT 了！ 暂时结束opencore基本就是这么多，其实已经相当不少了，希望各位在学习之后，学有所成，买个白果😁","link":"/2020/07/07/opencore%E5%A4%A7%E5%85%B8/"},{"title":"如何安装MacOsBigSur","text":"在2020年的Apple举办的WWDC开发者大会上，苹果发布了最新的Beta测试系统——macOSBigSur。自然，我们黑苹果阵地也不能落下，下面是安装它的简易教程 开始之前你需要什么？ Vmware虚拟机（破解） 用于安装macos到实体硬盘 必须 MacOsBigSur的cdr镜像 用于安装！在此下载 必须 opencore0.6.0 测试版，用于引导在此下载 必须为0.6.0以上（重要！） 一台支持UEFI并且取消了安全启动的电脑 不然你安装啥macos 当然必须 配置oc参考黑果小兵和xjn的教程 开始安装进入VM进入vm虚拟机并将cdr文件创建macos虚拟机，挂载一块实体硬盘！（你需要的实体硬盘） 随后，打开虚拟机目录，找到后缀为VMX的文件，用记事本打开，添加： 12345checkpoint.vmState = &quot;&quot;tools.remindInstall = &quot;FALSE&quot;smbios.reflectHost = &quot;TRUE&quot;hw.model = &quot;iMac15,1&quot;board-id = &quot;Mac-42FD25EABCABB274&quot; 随后启动虚拟机（如果在安装时还是无法选择硬盘，评论留言告诉我） 进入磁盘工具，一定要抹掉实体硬盘（注意备份你需要的资料） 随后安装（看脸，大概需要1小时） OC进入完全安装完毕后，关掉虚拟机，重启电脑，从OC0.6.0进入macos 最后这玩意不稳定，尝鲜用户应该不怕系统挂吧（狗头保命）","link":"/2020/07/06/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85MacosBigSur/"},{"title":"54名科学家因NIH调查外交关系而失去工作","text":"翻译自美国科学杂志官网（AAAS）https://www.sciencemag.org/news/2020/06/fifty-four-scientists-have-lost-their-jobs-result-nih-probe-foreign-ties 由于美国国家卫生研究院对NIH受赠方未能披露与外国政府的财务联系的调查，约54名科学家辞职或被解雇。在93%的案例中，隐性资金来自一家中国机构。 新的数据来自美国国家卫生研究院的校外研究主管迈克尔·劳尔。劳尔此前曾提供过一些关于NIH调查范围的信息，调查对象是87个机构的189名科学家。但他今天向一个高级顾问团发表演讲，这是NIH在2018年8月发起的一项迄今最详细的突破，它搅乱了美国生物医学界，并导致对一些著名研究人员提出刑事指控，其中包括哈佛大学化学和化学生物学系主任查尔斯·利伯。 “这不是我们所希望的，这不是一件有趣的任务，”NIH主任弗朗西斯·柯林斯在描述正在进行的调查时说。他称这些数据是”令人注意的”。 劳尔报告说，在绝大多数案件中，被调查的人是一名50多岁的男子。在接受调查的人员中，约有四分之三的人拥有积极的NIH补助金，近半数的人至少有两笔补助金。285笔有效赠款共计1.64亿美元。 劳尔还介绍了NIH揭露的违规行为的性质。约70%（133）的研究人员没有向NIH透露接受外国资助，54%的研究人员没有透露参与外国人才计划。劳尔说，相比之下，只有9%的人与外国公司有联系，只有4%的人拥有未公开的外国专利。约5%的案件涉及违反NIH的同行审查制度。 劳尔说，82%的被调查者是亚洲人，”这并不奇怪”，因为他们的国外人才招聘计划中”这就是中国人的目标”。约82%是男性，平均年龄为56岁，年龄最小的48岁，年龄最大的59岁。在过去两年中，略多于半数的NIH同行评审员，41%的被调查者（77名科学家）被禁止进一步参与NIH备受推崇的审批拨款提案制度。 NIH一直站在联邦努力的前沿，以识别和阻止许多美国政府官员说的行为对国家经济福祉和国家安全构成重大威胁。国会正在审议的几项法案试图以各种方式限制这一威胁，包括限制科学人才从中国流向美国，以及限制获得联邦资助的研究，为尖端技术和新兴产业奠定基础。 劳尔的介绍也让人们看到了这一更广泛调查的范围。他告诉顾问委员会，有399名科学家”可能担心”NIH，联邦调查局已经指了30%（121人）。另有44人被其机构标记。劳尔说，在63%或256名科学家的调查中，他们”呈阳性”。他指出，对约19%的调查是”负面的”，而其余18%的情况”尚未解决”。","link":"/2020/06/17/54%E5%90%8D%E7%A7%91%E5%AD%A6%E5%AE%B6%E5%9B%A0NIH%E8%B0%83%E6%9F%A5%E5%A4%96%E4%BA%A4%E5%85%B3%E7%B3%BB%E8%80%8C%E5%A4%B1%E5%8E%BB%E5%B7%A5%E4%BD%9C/"},{"title":"从0开始搭建一个人工智障（python）","text":"首先，这是基于python的程序，不知道python是啥，请百度 用户输入要想让机器读取你想说什么，你首先需要用户输入（input） 就像这样userinput = input(&quot;talk some with me&quot;) 这样电脑就知道你想说啥了 if语句让他做出判断吧，就需要用到if语句做出判断了。 就像这样 12if userinput == \"How are you\": print(\"I am fine ,thank you.\") while Ture需要让机器人反复回答你的问题，那就加上while Ture循环（死循环） 1234while True: userinput = input(\"talk some with me\") if userinput == \"How are you\": print(\"I am fine ,thank you.\") 自动百度＆谷歌自动百度和谷歌的代码我就直接放在这了，和普通的回答差不多，只是变量多一些 自动百度： 123if userinput == \"baidu\": baidu = input(\"what do you want to search\") print(\"https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;ch=&amp;tn=baiduerr&amp;bar=&amp;wd=\" + baidu) 自动谷歌： 123if userinput == \"google\": google = input(\"what do you want to search\") print(\"https://www.google.com/search?q=\" + google) 源码这是源码，建议不要直接CTRL+C CTRL+V，因为这是我手打的。 123456789101112131415161718while True: userinput = input(\"talk some with me\") if userinput == \"How are you\": print(\"I am fine ,thank you.\") if userinput == \"baidu\": baidu = input(\"what do you want to search\") print(\"https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;ch=&amp;tn=baiduerr&amp;bar=&amp;wd=\" + baidu) if userinput == \"Hello\": print(\"Hi\") if userinput == \"google\": google = input(\"what do you want to search\") print(\"https://www.google.com/search?q=\" + google) if userinput == (\"help\"): print(\"What's metter with you,You can sand e-mail to owen6666662019@outlook.com\") 最后本文手撸，转载请标明本文链接，本文为原创。&gt;~&lt;","link":"/2020/06/18/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BA%BA%E5%B7%A5%E6%99%BA%E9%9A%9C%EF%BC%88python%EF%BC%89/"},{"title":"OCC介绍以及虚拟化macOS的搭建及优化","text":"OCC是opencore的可视化编辑器，而其需要macOS的环境，本篇将讲述在VM下虚拟化macOS安装OCC的方法 介绍OCCOCC，全称OpenCore Configurator是个第三方可视化编辑器，目前测试版已经（包括汉化）更新到最新的0.6.1了，并且十分稳定，但只能在macOS下使用，而另一个可视化编辑器QtOpencoreConfig虽然支持Windows，但由于刚刚发布不久，稳定性仍然持怀疑态度，所以OCC目前是最好的可视化编辑器。 虚拟化macOS 需要的工具/应用 备注 unlocker 使VM可以安装macOS VMware 别告诉我你没有 cdr镜像 Big SurB1的cdr镜像 破解VMware在unlock文件夹里管理员运行win-install.cmd，最好和VM放在一个文件夹里，然后等它自己完成 新建虚拟机和Windows一样，记得选macOS 安装安装这里有坑，记得打开虚拟机根目录的后缀为VMX的文件，文本编辑器打开，添加： 12345checkpoint.vmState = &quot;&quot;tools.remindInstall = &quot;FALSE&quot;smbios.reflectHost = &quot;TRUE&quot;hw.model = &quot;iMac15,1&quot;board-id = &quot;Mac-42FD25EABCABB274&quot; 这样磁盘就不会报错成灰色的了 优化dock动画从神奇动画改成缩放动画（GPU不行） 辅助功能选择降低透明度（还是GPU不行） 安装OCC扔进去之后直接双击会报错，右键选择打开，进入","link":"/2020/08/09/OCC%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E8%99%9A%E6%8B%9F%E5%8C%96macOS%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BC%98%E5%8C%96/"}],"tags":[],"categories":[]}